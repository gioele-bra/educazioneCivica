import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { generateRandomId } from '../../helpers/id.helper';
import { FilterType } from '../../models/control-type.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
export class ControlWrapperComponent {
    constructor(loaderService) {
        this.loaderService = loaderService;
        /**
         * Emits when an error occurs when attempting to render the control.
         */
        this.error = new EventEmitter();
        /**
         * The control is ready to accept user interaction and for external method calls.
         *
         * Alternatively, you can listen for a ready event on the dashboard holding the control
         * and call control methods only after the event was fired.
         */
        this.ready = new EventEmitter();
        /**
         * Emits when the user interacts with the control, affecting its state.
         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.
         *
         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.
         */
        this.stateChange = new EventEmitter();
        /**
         * A generated id assigned to this components DOM element.
         */
        this.id = generateRandomId();
        this.wrapperReadySubject = new ReplaySubject(1);
    }
    /**
     * Emits after the `ControlWrapper` was created.
     */
    get wrapperReady$() {
        return this.wrapperReadySubject.asObservable();
    }
    get controlWrapper() {
        if (!this._controlWrapper) {
            throw new Error(`Cannot access the control wrapper before it being initialized.`);
        }
        return this._controlWrapper;
    }
    ngOnInit() {
        this.loaderService.loadChartPackages('controls').subscribe(() => {
            this.createControlWrapper();
        });
    }
    ngOnChanges(changes) {
        if (!this._controlWrapper) {
            return;
        }
        if (changes.type) {
            this._controlWrapper.setControlType(this.type);
        }
        if (changes.options) {
            this._controlWrapper.setOptions(this.options || {});
        }
        if (changes.state) {
            this._controlWrapper.setState(this.state || {});
        }
    }
    createControlWrapper() {
        this._controlWrapper = new google.visualization.ControlWrapper({
            containerId: this.id,
            controlType: this.type,
            state: this.state,
            options: this.options
        });
        this.addEventListeners();
        this.wrapperReadySubject.next(this._controlWrapper);
    }
    addEventListeners() {
        google.visualization.events.removeAllListeners(this._controlWrapper);
        google.visualization.events.addListener(this._controlWrapper, 'ready', (event) => this.ready.emit(event));
        google.visualization.events.addListener(this._controlWrapper, 'error', (event) => this.error.emit(event));
        google.visualization.events.addListener(this._controlWrapper, 'statechange', (event) => this.stateChange.emit(event));
    }
}
ControlWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'control-wrapper',
                template: '',
                host: { class: 'control-wrapper' },
                exportAs: 'controlWrapper',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ControlWrapperComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
ControlWrapperComponent.propDecorators = {
    for: [{ type: Input }],
    type: [{ type: Input }],
    options: [{ type: Input }],
    state: [{ type: Input }],
    error: [{ type: Output }],
    ready: [{ type: Output }],
    stateChange: [{ type: Output }],
    id: [{ type: HostBinding, args: ['id',] }]
};
//# sourceMappingURL=data:application/json;base64,